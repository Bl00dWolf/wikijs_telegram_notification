import os
import requests
import json
from datetime import datetime, timezone
import logging
import sys
import re

# ------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -------
WIKI_GRAPHQL_URL = os.getenv("WIKI_GRAPHQL_URL")
WIKI_API_TOKEN = os.getenv("WIKI_API_TOKEN")
SITE_URL = os.getenv("SITE_URL")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
TELEGRAM_THREAD_ID = os.getenv("TELEGRAM_THREAD_ID")

CHECK_INTERVAL_MINUTES = int(os.getenv("CHECK_INTERVAL_MINUTES", "5"))
CACHE_FILE = ".wiki_cache.json"

# ------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("logs/app.log")
    ]
)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    if not text:
        return ""
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    pattern = r"([_*\[\]()~`>#+\-={}.!\\])"
    return re.sub(pattern, r"\\\1", text)


def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "message_thread_id": TELEGRAM_THREAD_ID,
        "chat_id": TELEGRAM_CHANNEL_ID,
        "text": message,
        "parse_mode": "MarkdownV2",
        "disable_web_page_preview": True
    }
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %s", response.text)
        else:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", str(e))


def load_cache():
    try:
        with open(CACHE_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.warning("–§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω: %s", str(e))
        return {}


def save_cache(data):
    with open(CACHE_FILE, "w") as f:
        json.dump(data, f, indent=2)
    logging.debug("–ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω")


def fetch_wiki_pages():
    query = """
    {
      pages {
        list {
          id
          title
          description
          path
          createdAt
          updatedAt
        }
      }
    }
    """
    headers = {
        "Authorization": f"Bearer {WIKI_API_TOKEN}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(WIKI_GRAPHQL_URL, json={"query": query}, headers=headers)
        if response.status_code == 200:
            logging.debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Wiki.js")
            return response.json()["data"]["pages"]["list"]
        else:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wiki.js: %s", response.text)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wiki.js: %s", str(e))
    return []


def check_wiki_updates():
    cache = load_cache()
    now = datetime.now(timezone.utc)
    cutoff_time = now.timestamp() - CHECK_INTERVAL_MINUTES * 60

    try:
        pages = fetch_wiki_pages()

        is_first_run = not bool(cache)

        for page in pages:
            page_id = str(page["id"])
            updated_at = datetime.fromisoformat(page["updatedAt"].replace("Z", "+00:00")).timestamp()

            cached = cache.get(page_id)

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            escaped_title = escape_markdown(page['title'])
            escaped_description = escape_markdown(page['description']) if page.get('description') else ""
            description_text = f"\n\n{escaped_description}"
            link = f"{SITE_URL}{page['path']}"

            if is_first_run:
                cache[page_id] = {"createdAt": page["createdAt"], "updatedAt": page["updatedAt"]}
                continue

            if not cached:
                message = f"üÜï *–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:*\n{escaped_title}{description_text}\n\nüîó [–ß–∏—Ç–∞—Ç—å]({link})"
                send_telegram_message(message)
                cache[page_id] = {"createdAt": page["createdAt"], "updatedAt": page["updatedAt"]}
                continue

            cached_updated_at = datetime.fromisoformat(cached["updatedAt"].replace("Z", "+00:00")).timestamp()
            if updated_at > cutoff_time and updated_at != cached_updated_at:
                message = f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è:*\n{escaped_title}{description_text}\n\nüîó [–ß–∏—Ç–∞—Ç—å]({link})"
                send_telegram_message(message)
                cache[page_id]["updatedAt"] = page["updatedAt"]

        save_cache(cache)

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Wiki: %s", str(e))


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Wiki.js")
    check_wiki_updates()
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
